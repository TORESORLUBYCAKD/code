http://www.itdks.com/eventlist/detail/2307
Dubbo开源现状与未来规划
    基本原理
       Dubbo是Java的高效RPC服务框架；
       Dubbo的四大组成部分：服务提供方、服务消费方、（前两者的连接点）注册中心、（监控模块）Monitor；
       运行阶段分为两部分：启动阶段、RPC调用阶段；
         启动阶段：服务提供者把服务在本地指定的端口上暴露后把地址信息同步到注册中心，服务端就启动了；
                  消费端要订阅自己感兴趣的服务，需要向注册中心订阅；
         RPC的调用：消费端拿到服务端的地址列表后，会选中一个，然后发起一个RPC的直接调用；
                   在整个调用的过程中，服务端和消费端都会把相关的信息发送给监控平台Monitor；
       Dubbo架构图（给跪图）
         左边是消费方相关的实现，右边是提供方相关的实现；
         九小层从功能角度可以看作三大层：业务逻辑层、RPC调用层、Remoting传输层；
               从接口的角度分层：用户API、扩展API；
         一次RPC调用：消费端拿到一个proxy后，从注册中心选择一个地址（选择的逻辑在clusters里），选完后会经过protocol层面来决定要执行哪些调用链，
                     调用链会把RPC相关的参数、方法名、接口名这些信息序列化后交给transport层，把信息发出去，消费端就完成了；
                     服务端收到请求后，会经过服务的转码解码反序列化，经过服务端的protocol调用链处理后，找到invoker，最后调用真正的具体的服务实现；
         Dubbo的低耦合高内聚体现在SPI上，Dubbo内部的所有层的扩展都是通过SPI来实现的，用户可以通过SPI任意替换Dubbo里的任意一层；
    Dubbo社区
       开源的目的：开源精神、统一分支、集思广益共同解决问题；
       把项目捐献给了Apache，避免了公司单方面主导的情况；
       社区大于代码，先给想法投票；
    开源现状
       支持Spring Boot，支持REST;
       底层框架目前升级到Spring Boot 2.0；
    后续规划
       未来技术的趋势：微服务、云原生；
       云原生意味着需要多语言的解决方案；
       Dubbo核心：模块化、元数据、路由策略、大流量、大规模（集群规模）、异步化；
       Dubbo生态扩展；
       互通：解决自身服务查询、治理、API文档、测试等问题；
             服务注册、服务安全等与标准对接；

Dubbo Cloud Native实践与思考
    Cloud Native基础设施
       服务发现、负载均衡、服务网关、分布式配置（Apollo）、服务熔断、跟踪监控；
       服务发现：Zookeeper、Redis、Eureka、Consul、Curator;
       负载均衡：Kong(网关)、Ribbon（没有权重；一致性哈希、轮询、随机）、Dubbo；
       服务网关：OpenResty、Zuul、Spring Cloud Gateway、envoy；
       分布式配置：Zookeeper、git（Spring Cloud的默认实现）、etcd、Consul、JDBC；
       服务熔断：Dubbo、Kong、Hystrix；
       链路跟踪：ZIPKIN、OpenTracing、Jaeger；
       服务监控：OpenTSDB、HBase、Prometheus（普罗米修斯）、Grafana、elastic；
    Cloud Native架构选型
    Dubbo Cloud Native准备
        注解驱动：对Spring、Spring Cloud友好；
        外部化配置：配置写在代码里面；
        Reactive：异步非阻塞的响应式编程提升应用伸缩性，单位时间内处理更多的东西；
        REST：（用REST的例子包括实现前后端分离）融入微服务架构体系；
                
Nacos-贡献Dubbo生态，阿里巴巴注册中心和配置中心开源计划
    Nacos是动态命名和配置服务，英文首字母的组合；
      名字服务、配置及服务元数据管理
    Nacos部分特性
       云和企业特性
           支持云部署
       服务发现和管理
       动态配置管理
       动态DNS和健康监测
       
Dubbo在互金行业的应用场景
    平台现状介绍
        借点钱APP把合适的钱借给合适的人，创业型公司融之家；
        注册用户3000w+；日均申请量50w+；平台接口日调用量6000w+；核心记录百亿；服务器数量800+；数据量10T+；
    借助Dubbo微服务化过程
        企业发展过程：一个war包打天下->引入nginx、redis均衡负载->引入Dubbo->引入微服务
        一个war包时遇到的问题：发版时导致服务断掉，无法访问；活动期间访问量大导致超时，零点维护仍会被用户察觉；
        引入nginx、redis：系统中存在大量重复代码，耦合严重；任何改动都可能引发其他的bug；系统质量降低，线上bug频发；
           Dubbo稳定，很多企业在用，能引入RPC通信，service拆分体系；
           Sping Cloud一直在更新，很多组件开箱即用（出现问题不一定能解决）；
        引入Dubbo：系统中任何一条性能差的SQL引发Dubbo线程池满，导致平台雪崩；DB承受能力下降，CPU 99%经常报警；每个人的代码风格不一样，不利于维护；
           需要准备微服务工具来直接生成PO DTO对象，自动生成pom依赖，自动生成单元测试，自动生成读写分离，自动生成代码框架；
           back控制层(war)，basic服务层（jar）;
        每个service对应单独的DB:分布式事务、聚合日志查询；   
    Dubbo使用经验分享
        开发->测试->预发->生产
        通过group方式隔离生产环境和预发布环境；
        权限控制基于Dubbo Filter机制扩展；
        在Dubbo框架上的监控模块进行了改进，分成权限平台、Mock平台、监控平台；
        5K->50K的过程：你说的东西别人都懂就会觉得你很low，但你说的东西不管有没有用过，别人没听过又觉得确实有效到时候再做也来得及，但一定得知道；
        为了提高响应速度把能并行化的服务并行化处理，遇到的问题是每个服务的响应时间不同，任何一个服务响应时间慢了导致整个请求响应时间变慢；
        引入Hystrix做线程池隔离，把相同类型的服务放在相同的线程池中；
        熔断功能的需求:设置错误率、人工干预、时间窗口、主动告警；
        Java的一个好处就是可以看源码；
        Mock平台能在不修改开发代码的情况下满足各种测试要求；
        面对大量的用户量考虑增加机器或者熔断或者其他策略；
        功能的扩展比抠源码找bug更能获益；
        
