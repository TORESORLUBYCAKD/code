http://www.itdks.com/eventlist/detail/2307
Dubbo开源现状与未来规划
    基本原理
       Dubbo是Java的高效RPC服务框架；
       Dubbo的四大组成部分：服务提供方、服务消费方、（前两者的连接点）注册中心、（监控模块）Monitor；
       运行阶段分为两部分：启动阶段、RPC调用阶段；
         启动阶段：服务提供者把服务在本地指定的端口上暴露后把地址信息同步到注册中心，服务端就启动了；
                  消费端要订阅自己感兴趣的服务，需要向注册中心订阅；
         RPC的调用：消费端拿到服务端的地址列表后，会选中一个，然后发起一个RPC的直接调用；
                   在整个调用的过程中，服务端和消费端都会把相关的信息发送给监控平台Monitor；
       Dubbo架构图（给跪图）
         左边是消费方相关的实现，右边是提供方相关的实现；
         九小层从功能角度可以看作三大层：业务逻辑层、RPC调用层、Remoting传输层；
               从接口的角度分层：用户API、扩展API；
         一次RPC调用：消费端拿到一个proxy后，从注册中心选择一个地址（选择的逻辑在clusters里），选完后会经过protocol层面来决定要执行哪些调用链，
                     调用链会把RPC相关的参数、方法名、接口名这些信息序列化后交给transport层，把信息发出去，消费端就完成了；
                     服务端收到请求后，会经过服务的转码解码反序列化，经过服务端的protocol调用链处理后，找到invoker，最后调用真正的具体的服务实现；
         Dubbo的低耦合高内聚体现在SPI上，Dubbo内部的所有层的扩展都是通过SPI来实现的，用户可以通过SPI任意替换Dubbo里的任意一层；
    Dubbo社区
       开源的目的：开源精神、统一分支、集思广益共同解决问题；
       把项目捐献给了Apache，避免了公司单方面主导的情况；
       社区大于代码，先给想法投票；
    开源现状
       支持Spring Boot，支持REST;
       底层框架目前升级到Spring Boot 2.0；
    后续规划
       未来技术的趋势：微服务、云原生；
       云原生意味着需要多语言的解决方案；
       Dubbo核心：模块化、元数据、路由策略、大流量、大规模（集群规模）、异步化；
       Dubbo生态扩展；
       互通：解决自身服务查询、治理、API文档、测试等问题；
             服务注册、服务安全等与标准对接；

Dubbo Cloud Native实践与思考
    Cloud Native基础设施
       服务发现、负载均衡、服务网关、分布式配置（Apollo）、服务熔断、跟踪监控；
       服务发现：Zookeeper、Redis、Eureka、Consul、Curator;
       负载均衡：Kong(网关)、Ribbon（没有权重；一致性哈希、轮询、随机）、Dubbo；
       服务网关：OpenResty、Zuul、Spring Cloud Gateway、envoy；
       分布式配置：Zookeeper、git（Spring Cloud的默认实现）、etcd、Consul、JDBC；
       服务熔断：Dubbo、Kong、Hystrix；
       链路跟踪：ZIPKIN、OpenTracing、Jaeger；
       服务监控：OpenTSDB、HBase、Prometheus（普罗米修斯）、Grafana、elastic；
    Cloud Native架构选型
    Dubbo Cloud Native准备
        注解驱动：对Spring、Spring Cloud友好；
        外部化配置：配置写在代码里面；
        Reactive：异步非阻塞的响应式编程提升应用伸缩性，单位时间内处理更多的东西；
        REST：（用REST的例子包括实现前后端分离）融入微服务架构体系；
        
