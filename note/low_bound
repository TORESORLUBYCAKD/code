https://blog.csdn.net/u011008379/article/details/50725670
两个函数的用法类似，在一个左闭右开的有序区间里进行二分查找，需要查找的值由第三个参数给出。 
    对于upper_bound来说，返回的是被查序列中第一个大于查找值的指针，也就是返回指向被查值>查找值的最小指针，
    lower_bound则是返回的是被查序列中第一个大于等于查找值的指针，也就是返回指向被查值>=查找值的最小指针。
如果第四个参数传入greater<Type>()，其中Type改成对应类型，
那么upper_bound则返回指向被查值<查找值的最小指针，lower_bound则返回指向被查值<=查找值的最小指针。 
注释掉的是错误用法
#include <iostream>
#include <algorithm>

using namespace std;

int seq1[] = {1, 2, 3, 3, 4, 5}, seq2[] = {9, 8, 7, 7, 6, 5};

int main()
{
    //cout<<upper_bound(seq1, seq1+6, 3, greater<int>()) - seq1<<endl;
    //cout<<lower_bound(seq1, seq1+6, 3, greater<int>()) - seq1<<endl;
    cout<<upper_bound(seq1, seq1+6, 3) - seq1<<endl;
    cout<<lower_bound(seq1, seq1+6, 3) - seq1<<endl;

    cout<<endl;

    cout<<upper_bound(seq2, seq2+6, 7, greater<int>()) - seq2<<endl;
    cout<<lower_bound(seq2, seq2+6, 7, greater<int>()) - seq2<<endl;
    //cout<<upper_bound(seq2, seq2+6, 7) - seq2<<endl;
    //cout<<lower_bound(seq2, seq2+6, 7) - seq2<<endl;
    return 0;
}
